// <auto-generated />
using System;
using Chat.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chat.DB.AccountDb", b =>
                {
                    b.Property<long>("AccountDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountDbId"), 1L, 1);

                    b.Property<string>("AccountLoginId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AccountUniqueId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("AccountDbId");

                    b.HasIndex("AccountLoginId")
                        .IsUnique()
                        .HasFilter("[AccountLoginId] IS NOT NULL");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Chat.DB.ChatDb", b =>
                {
                    b.Property<decimal>("ChatDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("ChatDbId"), 1L, 1);

                    b.Property<int>("ChatType")
                        .HasColumnType("int");

                    b.Property<long>("IconId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RoomDbId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SenderDbId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("ChatDbId");

                    b.HasIndex("RoomDbId");

                    b.HasIndex("SenderDbId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Chat.DB.ChatRoomDb", b =>
                {
                    b.Property<decimal>("ChatRoomDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("ChatRoomDbId"), 1L, 1);

                    b.Property<string>("ChatRoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ChatRoomNumber")
                        .HasColumnType("bigint");

                    b.HasKey("ChatRoomDbId");

                    b.ToTable("ChatRoom");
                });

            modelBuilder.Entity("Chat.DB.UserDb", b =>
                {
                    b.Property<decimal>("UserDbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("UserDbId"), 1L, 1);

                    b.Property<long>("AccountDbId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserDbId");

                    b.HasIndex("AccountDbId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChatRoomDbUserDb", b =>
                {
                    b.Property<decimal>("RoomsChatRoomDbId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UsersUserDbId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("RoomsChatRoomDbId", "UsersUserDbId");

                    b.HasIndex("UsersUserDbId");

                    b.ToTable("ChatRoomDbUserDb");
                });

            modelBuilder.Entity("Chat.DB.ChatDb", b =>
                {
                    b.HasOne("Chat.DB.ChatRoomDb", "Room")
                        .WithMany("Chats")
                        .HasForeignKey("RoomDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.DB.UserDb", "Sender")
                        .WithMany("SentChats")
                        .HasForeignKey("SenderDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Chat.DB.UserDb", b =>
                {
                    b.HasOne("Chat.DB.AccountDb", "Account")
                        .WithMany()
                        .HasForeignKey("AccountDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ChatRoomDbUserDb", b =>
                {
                    b.HasOne("Chat.DB.ChatRoomDb", null)
                        .WithMany()
                        .HasForeignKey("RoomsChatRoomDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.DB.UserDb", null)
                        .WithMany()
                        .HasForeignKey("UsersUserDbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chat.DB.ChatRoomDb", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Chat.DB.UserDb", b =>
                {
                    b.Navigation("SentChats");
                });
#pragma warning restore 612, 618
        }
    }
}
